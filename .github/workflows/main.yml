name: Kotlin Dependency License Check

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  workflow_dispatch:

jobs:
  check-licenses:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Debug - Show repository structure
        run: |
          echo "üìÇ Repository structure:"
          find . -type d -not -path './.git*' -print
          echo "üîç TOML files found:"
          find . -name "*.toml" -exec echo "Found: {}" \;

      - name: Determine latest Go version
        id: get_go_version
        run: |
          latest_go_version=$(curl -s https://go.dev/VERSION?m=text | sed 's/^go//' | head -n 1)
          echo "go-version=$latest_go_version" >> "$GITHUB_OUTPUT"

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ steps.get_go_version.outputs.go-version }}

      - name: Create license checker directory and Go code
        run: |
          mkdir -p license-checker
          cd license-checker
          cat <<-'EOF' > license-checker.go
          package main

          import (
            "encoding/xml"
            "fmt"
            "io/fs"
            "io/ioutil"
            "net/http"
            "os"
            "path/filepath"
            "strings"

            "github.com/pelletier/go-toml"
          )

          type License struct {
            Name string `xml:"name"`
            URL  string `xml:"url"`
          }

          type MavenPOM struct {
            XMLName  xml.Name  `xml:"project"`
            Licenses []License `xml:"licenses>license"`
          }

          func findTOMLFile(root string) (string, error) {
            var found string
            err := filepath.WalkDir(root, func(path string, d fs.DirEntry, err error) error {
                if err != nil {
                    return err
                }
                if d.IsDir() && d.Name() == ".git" {
                    return filepath.SkipDir
                }
                if !d.IsDir() && strings.HasSuffix(d.Name(), ".toml") {
                    found = path
                    return filepath.SkipAll
                }
                return nil
            })

            if found == "" {
              return "", fmt.Errorf("no .toml file found in repository")
            }
            return found, err
          }

          func parseTOMLFile(filePath string) (map[string]string, error) {
            dependencies := make(map[string]string)
            tree, err := toml.LoadFile(filePath)
            if err != nil {
              return nil, fmt.Errorf("error loading TOML file: %v", err)
            }

            versionsTree := tree.Get("versions")
            librariesTree := tree.Get("libraries")

            var versions map[string]interface{}
            var libraries map[string]interface{}

            if versionsTree != nil {
              versions = versionsTree.(*toml.Tree).ToMap()
            }
            if librariesTree != nil {
              libraries = librariesTree.(*toml.Tree).ToMap()
            }

            for _, value := range libraries {
              lib := value.(map[string]interface{})
              group, _ := lib["group"].(string)
              name, _ := lib["name"].(string)
              versionRef, _ := lib["version.ref"].(string)
              version, _ := versions[versionRef].(string)
              dependencies[filepath.Join(group, name)] = version
            }

            return dependencies, nil
          }

          func fetchPOM(groupID, artifactID, version string) (*MavenPOM, error) {
            groupPath := strings.ReplaceAll(groupID, ".", "/")
            pomURL := fmt.Sprintf("https://repo1.maven.org/maven2/%s/%s/%s/%s-%s.pom", groupPath, artifactID, version, artifactID, version)

            resp, err := http.Get(pomURL)
            if err != nil {
              return nil, err
            }
            defer resp.Body.Close()

            data, err := ioutil.ReadAll(resp.Body)
            if err != nil {
              return nil, err
            }

            var pom MavenPOM
            err = xml.Unmarshal(data, &pom)
            return &pom, err
          }

          func getLicenseInfo(dependency, version string) (string, string) {
            parts := strings.Split(dependency, string(filepath.Separator))
            if len(parts) != 2 {
              return "Unknown", fmt.Sprintf("https://www.google.com/search?q=%s+%s+license", dependency, version)
            }

            groupID, artifactID := parts[0], parts[1]
            pom, err := fetchPOM(groupID, artifactID, version)
            if err != nil || len(pom.Licenses) == 0 {
              return "Unknown", fmt.Sprintf("https://www.google.com/search?q=%s+%s+license", dependency, version)
            }
            return pom.Licenses[0].Name, pom.Licenses[0].URL
          }

          func generateHTMLReport(dependencies map[string]string) error {
            os.MkdirAll("license-checker", os.ModePerm)
            reportPath := "license-checker/license-report.html"

            html := `<!DOCTYPE html>
            <html>
            <head><title>Kotlin Dependency License Report</title></head>
            <body>
              <h1>Dependency License Report</h1>
              <table border='1'>
                <tr><th>Dependency</th><th>Version</th><th>License</th><th>License URL</th></tr>`
            
            for dep, version := range dependencies {
              license, url := getLicenseInfo(dep, version)
              html += fmt.Sprintf("<tr><td>%s</td><td>%s</td><td>%s</td><td><a href='%s'>%s</a></td></tr>", 
                strings.ReplaceAll(dep, string(filepath.Separator), ":"), 
                version, 
                license, 
                url, 
                url)
            }
            html += "</table></body></html>"

            return ioutil.WriteFile(reportPath, []byte(html), 0644)
          }

          func main() {
            tomlFile, err := findTOMLFile(".")
            if err != nil {
              fmt.Println("Error finding TOML file:", err)
              os.Exit(1)
            }
            fmt.Printf("üîç Found TOML file at: %s\n", tomlFile)
            
            dependencies, err := parseTOMLFile(tomlFile)
            if err != nil {
              fmt.Println("Error parsing TOML file:", err)
              os.Exit(1)
            }
            
            if err := generateHTMLReport(dependencies); err != nil {
              fmt.Println("Error generating report:", err)
              os.Exit(1)
            }
            fmt.Println("‚úÖ Report generated successfully")
          }
          EOF

      - name: Compile and run license checker
        run: |
          cd license-checker
          go mod init license-checker
          go mod tidy
          go build -v -o license-checker-bin
          ./license-checker-bin

      - name: Debug - Verify report generation
        run: |
          echo "üìÑ License report verification:"
          ls -lha ./license-checker
          if [ -f ./license-checker/license-report.html ]; then
            echo "‚úÖ Report exists"
            echo "First 3 lines of report:"
            head -n 3 ./license-checker/license-report.html
          else
            echo "‚ùå Report file missing!"
            exit 1
          fi

      - name: Upload license report artifact
        uses: actions/upload-artifact@v4
        with:
          name: license-report
          path: ./license-checker/license-report.html
          retention-days: 7

      - name: Final check
        run: echo "üèÅ Workflow completed successfully"
