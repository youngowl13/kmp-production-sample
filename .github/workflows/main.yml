name: License Information Extraction

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  java-license-info:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set Up Java Environment
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '11'

      - name: Generate Java License Information
        uses: YunaBraska/maven-license-info-action@2.0.31
        with:
          work-dir: '.'
          exclude-scopes: 'test,provided,system'
          fail-license-regex: 'GPL'
          null-to-empty: 'true'

      - name: Upload Java License Report
        uses: actions/upload-artifact@v4
        with:
          name: java-license-report
          path: ./target/generated-sources/license

  go-license-info:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set Up Go Environment
        uses: actions/setup-go@v4
        with:
          go-version: '1.20'

      - name: Install Dependencies
        run: |
          mkdir -p license-checker
          cd license-checker
          go mod init license-checker
          go get github.com/pelletier/go-toml
          go mod tidy

      - name: Run Go-Based License Extractor
        run: |
          cd license-checker
          cat << 'EOF' > main.go
          package main

          import (
              "encoding/xml"
              "fmt"
              "io/fs"
              "io/ioutil"
              "net/http"
              "os"
              "path/filepath"
              "strings"
              "github.com/pelletier/go-toml"
          )

          // Structs for parsing POM XML
          type MavenPOM struct {
              XMLName    xml.Name  `xml:"project"`
              GroupID    string    `xml:"groupId"`
              ArtifactID string    `xml:"artifactId"`
              Version    string    `xml:"version"`
              Licenses   []License `xml:"licenses>license"`
              Parent     Parent    `xml:"parent"`
          }

          type License struct {
              Name string `xml:"name"`
              URL  string `xml:"url"`
          }

          type Parent struct {
              GroupID    string `xml:"groupId"`
              ArtifactID string `xml:"artifactId"`
              Version    string `xml:"version"`
          }

          func fetchPOM(url string) ([]byte, error) {
              resp, err := http.Get(url)
              if err != nil {
                  return nil, err
              }
              defer resp.Body.Close()
              return ioutil.ReadAll(resp.Body)
          }

          func parsePOM(data []byte) (MavenPOM, error) {
              var pom MavenPOM
              err := xml.Unmarshal(data, &pom)
              return pom, err
          }

          func constructPOMURL(repoBaseURL, groupID, artifactID, version string) string {
              groupPath := strings.ReplaceAll(groupID, ".", "/")
              return fmt.Sprintf("%s/%s/%s/%s/%s-%s.pom", repoBaseURL, groupPath, artifactID, version, artifactID, version)
          }

          func retrieveLicenseInfo(groupID, artifactID, version string) ([]License, error) {
              mavenCentralURL := "https://repo1.maven.org/maven2"
              googleMavenURL := "https://dl.google.com/dl/android/maven2"

              url := constructPOMURL(mavenCentralURL, groupID, artifactID, version)
              data, err := fetchPOM(url)
              if err != nil {
                  url = constructPOMURL(googleMavenURL, groupID, artifactID, version)
                  data, err = fetchPOM(url)
                  if err != nil {
                      return nil, fmt.Errorf("failed to fetch POM: %v", err)
                  }
              }

              pom, err := parsePOM(data)
              if err != nil {
                  return nil, err
              }

              if len(pom.Licenses) > 0 {
                  return pom.Licenses, nil
              }

              if pom.Parent.GroupID != "" && pom.Parent.ArtifactID != "" && pom.Parent.Version != "" {
                  return retrieveLicenseInfo(pom.Parent.GroupID, pom.Parent.ArtifactID, pom.Parent.Version)
              }

              return nil, fmt.Errorf("no license information found for %s:%s:%s", groupID, artifactID, version)
          }

          func main() {
              fmt.Println("Running Go-based license extractor...")
          }
          EOF
          go run main.go

      - name: Upload Go License Report
        uses: actions/upload-artifact@v4
        with:
          name: go-license-report
          path: license-checker/dependency-license-report.html
