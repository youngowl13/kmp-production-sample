name: Kotlin Dependency License Check

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  workflow_dispatch:

jobs:
  check-licenses:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Determine the latest Go version dynamically
      - name: Determine latest Go version
        id: get_go_version
        run: |
          latest_go_version=$(curl -s https://go.dev/VERSION?m=text | sed 's/^go//' | head -n 1)
          echo "go-version=$latest_go_version" >> "$GITHUB_OUTPUT"

      # Step 3: Set up Go environment
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ steps.get_go_version.outputs.go-version }}

      # Step 4: Create a directory for the license checker
      - name: Create license checker directory
        run: mkdir -p license-checker

      # Step 5: Build and run the license checker
      - name: Build and run license checker
        shell: bash
        run: |
          cd license-checker

          # Create Go code for the license checker
          cat <<-'EOF' > license-checker.go
          package main

          import (
            "encoding/xml"
            "fmt"
            "io/fs"
            "os"
            "path/filepath"
            "strings"

            "github.com/pelletier/go-toml"
          )

          type License struct {
            Name string `xml:"name"`
            URL  string `xml:"url"`
          }

          type MavenPOM struct {
            XMLName  xml.Name  `xml:"project"`
            Licenses []License `xml:"licenses>license"`
          }

          func findTOMLFiles(rootDir string) ([]string, error) {
            var tomlFiles []string
            err := filepath.WalkDir(rootDir, func(path string, d fs.DirEntry, err error) error {
              if err != nil {
                return err
              }
              if !d.IsDir() && strings.HasSuffix(d.Name(), ".toml") {
                tomlFiles = append(tomlFiles, path)
              }
              return nil
            })
            return tomlFiles, err
          }

          func parseTOMLFile(filePath string) (map[string]string, error) {
            dependencies := make(map[string]string)
            tree, err := toml.LoadFile(filePath)
            if err != nil {
              return nil, fmt.Errorf("error loading TOML file: %v", err)
            }

            versions := tree.Get("versions").(*toml.Tree)
            libraries := tree.Get("libraries").(*toml.Tree)

            for _, value := range libraries.ToMap() {
              lib := value.(map[string]interface{})
              group := lib["group"].(string)
              name := lib["name"].(string)
              versionRef := lib["version.ref"].(string)
              fullModule := fmt.Sprintf("%s:%s", group, name)
              dependencies[fullModule] = versions.Get(versionRef).(string)
            }

            return dependencies, nil
          }

          func main() {
            rootDir := os.Getenv("GITHUB_WORKSPACE")
            tomlFiles, err := findTOMLFiles(rootDir)
            if err != nil {
              fmt.Println("Error finding TOML files:", err)
              return
            }

            dependencies := make(map[string]string)
            for _, file := range tomlFiles {
              deps, err := parseTOMLFile(file)
              if err != nil {
                fmt.Println("Error parsing TOML file:", file, err)
                continue
              }
              for k, v := range deps {
                dependencies[k] = v
              }
            }

            fmt.Println("Extracted dependencies:", dependencies)
          }
          EOF

          # Initialize Go module and fetch dependencies
          go mod init license-checker
          go get github.com/pelletier/go-toml
          go build -o license-checker
          cd ..

          # Execute the license checker
          if ! ./license-checker/license-checker; then
            echo "Error: license-checker encountered an issue."
            exit 1
          fi

      # Step 6: Upload the license report as an artifact
      - name: Upload license report artifact
        uses: actions/upload-artifact@v4
        with:
          name: license-report
          path: license-checker/license-report.html

      # Step 7: Upload the binary artifact of the license checker
      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: kotlin-license-checker
          path: license-checker/license-checker
