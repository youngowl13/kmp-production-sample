name: Kotlin Dependency License Check

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  workflow_dispatch:

jobs:
  check-licenses:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Determine the latest Go version dynamically
      - name: Determine latest Go version
        id: get_go_version
        run: |
          latest_go_version=$(curl -s https://go.dev/VERSION?m=text | sed 's/^go//' | head -n 1)
          echo "go-version=$latest_go_version" >> "$GITHUB_OUTPUT"

      # Step 3: Set up Go environment
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ steps.get_go_version.outputs.go-version }}

      # Step 4: Create a directory for the license checker
      - name: Create license checker directory
        run: mkdir -p license-checker

      # Step 5: Build and run the license checker
      - name: Build and run license checker
        shell: bash
        run: |
          cd license-checker

          # Create Go code for the license checker
          cat <<-'EOF' > license-checker.go
          package main

          import (
            "encoding/xml"
            "fmt"
            "io/ioutil"
            "net/http"
            "os"
            "path/filepath"
            "strings"

            "github.com/pelletier/go-toml"
          )

          type License struct {
            Name string `xml:"name"`
            URL  string `xml:"url"`
          }

          type MavenPOM struct {
            Licenses []License `xml:"licenses>license"`
          }

          func findTOMLFiles(rootDir string) ([]string, error) {
            var tomlFiles []string
            err := filepath.Walk(rootDir, func(path string, info os.FileInfo, err error) error {
              if err != nil {
                return err
              }
              if !info.IsDir() && strings.HasSuffix(path, ".toml") {
                tomlFiles = append(tomlFiles, path)
              }
              return nil
            })
            return tomlFiles, err
          }

          func parseTOMLFile(filePath string) (map[string]string, error) {
            dependencies := make(map[string]string)
            tree, err := toml.LoadFile(filePath)
            if err != nil {
              return nil, fmt.Errorf("error loading TOML file: %v", err)
            }

            versions := tree.Get("versions").(*toml.Tree)
            libraries := tree.Get("libraries").(*toml.Tree)

            for _, value := range libraries.ToMap() {
              lib := value.(map[string]interface{})
              group, groupOk := lib["group"].(string)
              name, nameOk := lib["name"].(string)
              versionRef, versionRefOk := lib["version.ref"].(string)
              if !groupOk || !nameOk || !versionRefOk {
                continue
              }
              version, versionOk := versions.Get(versionRef).(string)
              if !versionOk {
                continue
              }
              dependencies[fmt.Sprintf("%s:%s", group, name)] = version
            }

            return dependencies, nil
          }

          func fetchPOM(group, artifact, version string) (*MavenPOM, error) {
            groupPath := strings.ReplaceAll(group, ".", "/")
            url := fmt.Sprintf("https://repo1.maven.org/maven2/%s/%s/%s/%s-%s.pom", groupPath, artifact, version, artifact, version)
            resp, err := http.Get(url)
            if err != nil {
              return nil, err
            }
            defer resp.Body.Close()
            data, err := ioutil.ReadAll(resp.Body)
            if err != nil {
              return nil, err
            }
            var pom MavenPOM
            err = xml.Unmarshal(data, &pom)
            return &pom, err
          }

          func generateHTMLReport(dependencies map[string]string) error {
            html := `
            <!DOCTYPE html>
            <html>
            <head>
              <title>Kotlin Dependency License Report</title>
              <style>
                table { width: 100%; border-collapse: collapse; }
                th, td { border: 1px solid #ddd; padding: 8px; }
                th { background-color: #f2f2f2; }
              </style>
            </head>
            <body>
              <h1>Kotlin Dependency License Report</h1>
              <table>
                <tr>
                  <th>Dependency</th>
                  <th>Version</th>
                  <th>License</th>
                  <th>License URL</th>
                </tr>`

            for dep, version := range dependencies {
              parts := strings.Split(dep, ":")
              if len(parts) != 2 {
                html += fmt.Sprintf("<tr><td>%s</td><td>%s</td><td>Invalid format</td><td>N/A</td></tr>", dep, version)
                continue
              }
              group, artifact := parts[0], parts[1]
              pom, err := fetchPOM(group, artifact, version)
              if err != nil || len(pom.Licenses) == 0 {
                html += fmt.Sprintf("<tr><td>%s</td><td>%s</td><td>Unknown</td><td>N/A</td></tr>", dep, version)
                continue
              }
              license := pom.Licenses[0]
              html += fmt.Sprintf("<tr><td>%s</td><td>%s</td><td>%s</td><td><a href='%s' target='_blank'>%s</a></td></tr>",
                dep, version, license.Name, license.URL, license.URL)
            }

            html += `
              </table>
            </body>
            </html>`

            return ioutil.WriteFile("license-report.html", []byte(html), 0644)
          }

          func main() {
            rootDir := os.Getenv("GITHUB_WORKSPACE")
            tomlFiles, err := findTOMLFiles(rootDir)
            if err != nil {
              fmt.Println("Error finding TOML files:", err)
              os.Exit(1)
            }

            dependencies := make(map[string]string)
            for _, file := range tomlFiles {
              deps, err := parseTOMLFile(file)
              if err != nil {
                fmt.Printf("Error parsing TOML file %s: %v\n", file, err)
                continue
              }
              for k, v := range deps {
                dependencies[k] = v
              }
            }

            err = generateHTMLReport(dependencies)
            if err != nil {
              fmt.Println("Error generating HTML report:", err)
              os.Exit(1)
            }
          }
          EOF

          # Initialize Go module and build the tool
          go mod init license-checker
          go get github.com/pelletier/go-toml
          go build -o license-checker
          cd ..

          # Run the license checker
          if ! ./license-checker/license-checker; then
            echo "Error: license-checker encountered an issue."
            exit 1
          fi

      # Step 6: Upload the license report as an artifact
      - name: Upload license report artifact
        uses: actions/upload-artifact@v4
        with:
          name: license-report
          path: license-checker/license-report.html

      # Step 7: Upload the license checker binary
      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: kotlin-license-checker
          path: license-checker/license-checker
