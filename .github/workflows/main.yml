name: Kotlin Dependency License Check

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  workflow_dispatch:

jobs:
  check-licenses:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Determine latest Go version
        id: get_go_version
        run: |
          latest_go_version=$(curl -s https://go.dev/VERSION?m=text | sed 's/^go//' | head -n 1)
          echo "go-version=$latest_go_version" >> "$GITHUB_OUTPUT"

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ steps.get_go_version.outputs.go-version }}

      - name: Create license checker directory and Go code
        run: |
          mkdir -p license-checker
          cat <<-'EOF' > license-checker/license-checker.go
          package main

          import (
              "encoding/xml"
              "fmt"
              "html/template"
              "io/ioutil"
              "net/http"
              "os"
              "path/filepath"
              "strings"

              "github.com/pelletier/go-toml"
          )

          type License struct {
              Name string `xml:"name"`
              URL  string `xml:"url"`
          }

          type MavenPOM struct {
              XMLName  xml.Name  `xml:"project"`
              Licenses []License `xml:"licenses>license"`
          }

          func findTOMLFile(root string) (string, error) {
              var tomlFile string
              err := filepath.Walk(root, func(path string, info os.FileInfo, err error) error {
                  if err != nil {
                      return err
                  }
                  if !info.IsDir() && strings.HasSuffix(info.Name(), ".toml") {
                      tomlFile = path
                      return filepath.SkipDir
                  }
                  return nil
              })
              if tomlFile == "" {
                  return "", fmt.Errorf("no .toml file found")
              }
              return tomlFile, nil
          }

          func parseTOMLFile(filePath string) (map[string]string, error) {
              dependencies := make(map[string]string)
              tree, err := toml.LoadFile(filePath)
              if err != nil {
                  return nil, fmt.Errorf("error loading TOML file: %v", err)
              }

              versions := tree.Get("versions").(*toml.Tree).ToMap()
              libraries := tree.Get("libraries").(*toml.Tree).ToMap()

              for key, value := range libraries {
                  lib := value.(map[string]interface{})
                  group := lib["group"].(string)
                  name := lib["name"].(string)
                  version := lib["version.ref"].(string)
                  dependencies[fmt.Sprintf("%s:%s", group, name)] = versions[version].(string)
              }

              return dependencies, nil
          }

          func generateHTMLReport(dependencies map[string]string) error {
              tmpl := ` + "`" + `<!DOCTYPE html>
              <html>
              <head>
                  <title>Dependency License Report</title>
                  <style>
                      body { font-family: Arial, sans-serif; }
                      table { width: 100%; border-collapse: collapse; }
                      th, td { text-align: left; padding: 8px; border: 1px solid #ddd; }
                      th { background-color: #f2f2f2; }
                  </style>
              </head>
              <body>
                  <h1>Dependency License Report</h1>
                  <table>
                      <thead>
                          <tr>
                              <th>Dependency</th>
                              <th>Version</th>
                              <th>License</th>
                          </tr>
                      </thead>
                      <tbody>
                          {{ range $key, $value := . }}
                          <tr>
                              <td>{{ $key }}</td>
                              <td>{{ $value }}</td>
                              <td>Unknown</td>
                          </tr>
                          {{ end }}
                      </tbody>
                  </table>
              </body>
              </html>` + "`" + `

              reportPath := "license-checker/license-report.html"
              tmplParsed, err := template.New("report").Parse(tmpl)
              if err != nil {
                  return fmt.Errorf("error parsing template: %v", err)
              }

              file, err := os.Create(reportPath)
              if err != nil {
                  return fmt.Errorf("error creating report file: %v", err)
              }
              defer file.Close()

              return tmplParsed.Execute(file, dependencies)
          }

          func main() {
              tomlFile, err := findTOMLFile(".")
              if err != nil {
                  fmt.Println("Error finding TOML file:", err)
                  os.Exit(1)
              }

              dependencies, err := parseTOMLFile(tomlFile)
              if err != nil {
                  fmt.Println("Error parsing TOML file:", err)
                  os.Exit(1)
              }

              if err := generateHTMLReport(dependencies); err != nil {
                  fmt.Println("Error generating HTML report:", err)
                  os.Exit(1)
              }

              fmt.Println("License report generated successfully.")
          }
          EOF

      - name: Compile and run license checker
        run: |
          cd license-checker
          go mod init license-checker
          go mod tidy
          go build -o license-checker
          ./license-checker

      - name: Upload license report artifact
        uses: actions/upload-artifact@v4
        with:
          name: license-report
          path: license-checker/license-report.html
