name: Kotlin Dependency License Check

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  workflow_dispatch:

jobs:
  check-licenses:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Determine the latest Go version dynamically
      - name: Determine latest Go version
        id: get_go_version
        run: |
          latest_go_version=$(curl -s https://go.dev/VERSION?m=text | sed 's/^go//' | head -n 1)
          echo "go-version=$latest_go_version" >> "$GITHUB_OUTPUT"

      # Step 3: Set up the Go environment
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ steps.get_go_version.outputs.go-version }}

      # Step 4: Create directory and add Go code for license checker
      - name: Create license checker directory and Go code
        run: |
          mkdir -p license-checker
          cd license-checker
          cat <<-'EOF' > license-checker.go
          package main

          import (
            "fmt"
            "os"
            "path/filepath"
            "github.com/pelletier/go-toml"
          )

          func findTOMLFile(root string) (string, error) {
            var tomlFile string
            err := filepath.Walk(root, func(path string, info os.FileInfo, err error) error {
              if err != nil {
                return err
              }
              if !info.IsDir() && filepath.Ext(path) == ".toml" {
                tomlFile = path
                return filepath.SkipDir
              }
              return nil
            })
            if tomlFile == "" {
              return "", fmt.Errorf("no .toml file found")
            }
            return tomlFile, err
          }

          func parseTOMLFile(filePath string) (map[string]string, error) {
            dependencies := make(map[string]string)
            tree, err := toml.LoadFile(filePath)
            if err != nil {
              return nil, fmt.Errorf("error loading TOML file: %v", err)
            }

            versions := tree.Get("versions").(*toml.Tree).ToMap()
            libraries := tree.Get("libraries").(*toml.Tree).ToMap()

            for _, value := range libraries {
              lib := value.(map[string]interface{})
              group, _ := lib["group"].(string)
              name, _ := lib["name"].(string)
              versionRef, _ := lib["version.ref"].(string)
              version, _ := versions[versionRef].(string)
              dependencies[fmt.Sprintf("%s:%s", group, name)] = version
            }

            return dependencies, nil
          }

          func generateHTMLReport(dependencies map[string]string) {
            html := `
              <!DOCTYPE html>
              <html>
              <head>
                <title>Kotlin Dependency License Report</title>
                <style>
                  table { border-collapse: collapse; width: 100%; }
                  th, td { border: 1px solid #ddd; padding: 8px; }
                  th { background-color: #f2f2f2; }
                </style>
              </head>
              <body>
                <h1>Kotlin Dependency License Report</h1>
                <table>
                  <tr><th>Dependency</th><th>Version</th><th>License</th><th>License URL</th><th>Search URL</th></tr>
            `
            for dep, version := range dependencies {
              html += fmt.Sprintf("<tr><td>%s</td><td>%s</td><td>Unknown</td><td>Unknown</td><td><a href='https://www.google.com/search?q=%s+%s+license'>Search</a></td></tr>", dep, version, dep, version)
            }
            html += `
                </table>
              </body>
              </html>
            `
            os.MkdirAll("./license-checker", os.ModePerm)
            _ = os.WriteFile("./license-checker/license-report.html", []byte(html), 0644)
          }

          func main() {
            tomlFile, err := findTOMLFile(".")
            if err != nil {
              fmt.Println("Error finding TOML file:", err)
              os.Exit(1)
            }
            dependencies, err := parseTOMLFile(tomlFile)
            if err != nil {
              fmt.Println("Error parsing TOML file:", err)
              os.Exit(1)
            }
            generateHTMLReport(dependencies)
            fmt.Println("License report successfully generated.")
          }
          EOF
          go mod init license-checker
          go get github.com/pelletier/go-toml
          go build -o license-checker-binary license-checker.go
          ./license-checker-binary

      # Step 5: Verify report generation
      - name: Verify License Report Location
        run: |
          echo "üîç Checking if license report exists..."
          if [ -f ./license-checker/license-report.html ]; then
            echo "‚úÖ License report found at ./license-checker/license-report.html"
          else
            echo "‚ùå License report was not generated!"
            exit 1
          fi
          ls -l ./license-checker

      # Step 6: Upload license report artifact
      - name: Upload license report artifact
        uses: actions/upload-artifact@v4
        with:
          name: license-report
          path: ./license-checker/license-report.html
