name: Dependency License Check

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - main

jobs:
  license-check:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout Repository
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Step 2: Setup Java
      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      # Step 3: Download and Install Gradle (Manual)
      - name: Download and Install Gradle
        run: |
          curl -sSLo gradle.zip https://services.gradle.org/distributions/gradle-7.5-all.zip
          unzip -q gradle.zip
          export PATH="$PWD/gradle-7.5/bin:$PATH"
          gradle --version

      # Step 4: Detect Deprecated Features
      - name: Detect Deprecated Features
        run: |
          gradle help --warning-mode all || true
          echo "Deprecation warnings detected. Refer to build/reports/problems/problems-report.html if available."

      # Step 5: Upgrade Gradle Wrapper
      - name: Upgrade Gradle Wrapper
        run: |
          gradle wrapper --gradle-version 7.5 --distribution-type all

      # Step 6: Commit Upgraded Wrapper Files
      - name: Commit Upgraded Wrapper
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: "Upgrade Gradle wrapper to 7.5"
          branch: ${{ github.ref_name }}

      # Step 7: Run Gradle Build and Generate License Report
      - name: Run Gradle Build
        run: |
          ./gradlew clean build --warning-mode all
          ./gradlew generateLicenseReport

      # Step 8: Upload License Reports
      - name: Upload License Reports
        uses: actions/upload-artifact@v4
        with:
          name: kotlin-dependency-license-report
          path: build/reports/dependency-license/dependency-license.json

      # Step 9: Setup Go Environment
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.20'

      # Step 10: Create and Build License Checker
      - name: Create and Build License Checker
        run: |
          mkdir -p license-checker
          cd license-checker
          cat << 'EOF' > main.go
          package main

          import (
              "encoding/json"
              "fmt"
              "os"
              "strings"
          )

          type Dependency struct {
              Name     string
              License  string
              Details  string
              Copyleft bool
          }

          func main() {
              kotlinDeps := parseKotlinDependencies("build/reports/dependency-license/dependency-license.json")
              generateHTMLReport(kotlinDeps)
              fmt.Println("Dependency license report generated: dependency-license-report.html")
          }

          func parseKotlinDependencies(filePath string) []Dependency {
              file, err := os.ReadFile(filePath)
              if err != nil {
                  fmt.Println("Error reading Gradle license report:", err)
                  return nil
              }

              var data []map[string]interface{}
              json.Unmarshal(file, &data)

              var result []Dependency
              for _, dep := range data {
                  name, _ := dep["moduleName"].(string)
                  licenses, _ := dep["moduleLicense"].([]interface{})
                  license := "Unknown"
                  if len(licenses) > 0 {
                      license = fmt.Sprintf("%v", licenses[0])
                  }

                  result = append(result, Dependency{
                      Name:    name,
                      License: license,
                      Details: fmt.Sprintf("https://mvnrepository.com/artifact/%s", name),
                      Copyleft: isCopyleftLicense(license),
                  })
              }
              return result
          }

          func isCopyleftLicense(license string) bool {
              copyleftLicenses := []string{"GPL", "LGPL", "AGPL", "MPL", "CC-BY-SA", "EPL", "OFL", "CPL", "OSL", "APL"}
              license = strings.ToUpper(license)
              for _, copyleft := range copyleftLicenses {
                  if strings.Contains(license, copyleft) {
                      return true
                  }
              }
              return false
          }

          func generateHTMLReport(dependencies []Dependency) {
              htmlContent := `
              <!DOCTYPE html>
              <html>
              <head>
                  <title>Dependency License Report</title>
                  <style>
                      table { width: 100%; border-collapse: collapse; }
                      th, td { border: 1px solid #ddd; padding: 8px; }
                      th { background-color: #f2f2f2; }
                      .copyleft { background-color: #f8d7da; color: #721c24; }
                      .non-copyleft { background-color: #d4edda; color: #155724; }
                  </style>
              </head>
              <body>
                  <h1>Dependency License Report</h1>
                  <table>
                      <tr><th>Package</th><th>License</th><th>Details</th></tr>` +
                  generateTable(dependencies) +
                  `</table>
              </body>
              </html>`
              os.WriteFile("dependency-license-report.html", []byte(htmlContent), 0644)
          }

          func generateTable(dependencies []Dependency) string {
              if len(dependencies) == 0 {
                  return "<p>No dependencies found.</p>"
              }

              table := ""
              for _, dep := range dependencies {
                  class := "non-copyleft"
                  if dep.Copyleft {
                      class = "copyleft"
                  }
                  table += fmt.Sprintf(`<tr class="%s"><td>%s</td><td>%s</td><td><a href="%s" target="_blank">View Details</a></td></tr>`, class, dep.Name, dep.License, dep.Details)
              }
              return table
          }
          EOF

          go mod init license-checker
          go mod tidy
          go build -o ../checker

      # Step 11: Run License Checker
      - name: Run License Checker
        run: ./checker

      # Step 12: Upload HTML Report
      - name: Upload Dependency License Report
        uses: actions/upload-artifact@v4
        with:
          name: dependency-license-report
          path: dependency-license-report.html
