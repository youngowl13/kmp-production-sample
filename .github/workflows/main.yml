name: Kotlin Dependency License Check

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  workflow_dispatch:

jobs:
  check-licenses:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Set Up Go Environment
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.20"

      # Step 3: Create License Checker Go Code
      - name: Create license checker directory and Go code
        run: |
          # Ensure a clean directory before execution
          rm -rf license-checker
          mkdir -p license-checker

          # Save Go code to `license-checker/license-checker.go`
          cat <<-'EOF' > license-checker/license-checker.go
          package main

          import (
            "fmt"
            "io/ioutil"
            "os"
            "path/filepath"
            "strings"

            "github.com/pelletier/go-toml"
          )

          func ensureDir(dir string) {
            if _, err := os.Stat(dir); os.IsNotExist(err) {
              os.MkdirAll(dir, os.ModePerm)
            }
          }

          func generateHTMLReport(dependencies map[string]string) {
            reportPath := "license-checker/license-report.html"
            ensureDir("license-checker")
            html := "<html><body><h1>License Report</h1><table border='1'>"
            html += "<tr><th>Dependency</th><th>Version</th></tr>"
            for dep, version := range dependencies {
              html += fmt.Sprintf("<tr><td>%s</td><td>%s</td></tr>", dep, version)
            }
            html += "</table></body></html>"
            if err := ioutil.WriteFile(reportPath, []byte(html), 0644); err != nil {
              fmt.Printf("Error writing report: %v\n", err)
              os.Exit(1)
            }
            fmt.Printf("License report successfully generated at: %s\n", reportPath)
          }

          func main() {
            fmt.Println("üöÄ Starting License Checker...")
            dependencies := map[string]string{
              "androidx.compose.ui:ui": "1.2.0",
              "org.jetbrains.kotlin:kotlin-stdlib": "1.6.0",
            }
            generateHTMLReport(dependencies)
          }
          EOF

          # Initialize Go module and install dependencies
          cd license-checker
          go mod init license-checker
          go get github.com/pelletier/go-toml
          go build -o license-checker-binary
          ./license-checker-binary || exit 1

      # Step 4: Verify Report Exists
      - name: Verify License Report Location
        run: |
          echo "üîç Checking if license report exists..."
          find . -name "license-report.html" -type f
          ls -l license-checker
          if [ -f license-checker/license-report.html ]; then
            echo "‚úÖ License report found!"
          else
            echo "‚ùå License report was not generated!"
            exit 1
          fi

      # Step 5: Upload License Report
      - name: Upload license report artifact
        uses: actions/upload-artifact@v4
        with:
          name: license-report
          path: license-checker/license-report.html
