name: Kotlin Dependency License Check

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  workflow_dispatch:

jobs:
  check-licenses:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.20"

      - name: Create license checker directory and Go code
        run: |
          mkdir -p license-checker
          cd license-checker
          cat <<-'EOF' > license-checker.go
          package main

          import (
            "encoding/xml"
            "fmt"
            "io/ioutil"
            "net/http"
            "net/url"
            "os"
            "path/filepath"
            "strings"

            "github.com/pelletier/go-toml"
          )

          type License struct {
            Name string `xml:"name"`
            URL  string `xml:"url"`
          }

          type MavenPOM struct {
            Licenses []License `xml:"licenses>license"`
          }

          func findTOMLFiles(rootDir string) ([]string, error) {
            var tomlFiles []string
            err := filepath.Walk(rootDir, func(path string, info os.FileInfo, err error) error {
              if err != nil {
                return err
              }
              if strings.HasSuffix(path, ".toml") {
                tomlFiles = append(tomlFiles, path)
              }
              return nil
            })
            return tomlFiles, err
          }

          func parseTOMLFile(filePath string) (map[string]string, error) {
            dependencies := make(map[string]string)
            tree, err := toml.LoadFile(filePath)
            if err != nil {
              return nil, fmt.Errorf("error loading TOML file: %v", err)
            }

            versions := tree.Get("versions")
            if versions == nil {
              return nil, fmt.Errorf("missing [versions] section in %s", filePath)
            }
            libraries := tree.Get("libraries")
            if libraries == nil {
              return nil, fmt.Errorf("missing [libraries] section in %s", filePath)
            }

            versionsMap := versions.(*toml.Tree).ToMap()
            librariesMap := libraries.(*toml.Tree).ToMap()

            for _, value := range librariesMap {
              lib := value.(map[string]interface{})
              group := lib["group"].(string)
              name := lib["name"].(string)
              versionRef := lib["version.ref"].(string)
              version := versionsMap[versionRef].(string)
              dependencies[fmt.Sprintf("%s:%s", group, name)] = version
            }
            return dependencies, nil
          }

          func generateHTMLReport(dependencies map[string]string) {
            reportPath := "license-checker/license-report.html"
            fmt.Println("Generating report at:", reportPath)

            html := "<html><body><h1>License Report</h1><table border='1'>"
            html += "<tr><th>Dependency</th><th>Version</th><th>License</th><th>URL</th></tr>"
            for dep, version := range dependencies {
              licenseName, licenseURL := "Unknown", "#"
              html += fmt.Sprintf("<tr><td>%s</td><td>%s</td><td>%s</td><td><a href='%s'>%s</a></td></tr>",
                dep, version, licenseName, licenseURL, licenseURL)
            }
            html += "</table></body></html>"

            err := ioutil.WriteFile(reportPath, []byte(html), 0644)
            if err != nil {
              fmt.Printf("Error writing HTML report: %v\n", err)
              os.Exit(1)
            }
            fmt.Println("License report successfully generated!")
          }

          func main() {
            fmt.Println("Starting License Checker...")

            rootDir := "./"
            tomlFiles, err := findTOMLFiles(rootDir)
            if err != nil {
              fmt.Println("Error finding TOML files:", err)
              os.Exit(1)
            }

            dependencies := make(map[string]string)
            for _, file := range tomlFiles {
              fmt.Println("Processing TOML file:", file)
              deps, err := parseTOMLFile(file)
              if err != nil {
                fmt.Println("Error parsing TOML file:", err)
                continue
              }
              for k, v := range deps {
                dependencies[k] = v
              }
            }

            generateHTMLReport(dependencies)
          }
          EOF
          go mod init license-checker
          go get github.com/pelletier/go-toml
          go build -o license-checker
          ./license-checker || exit 1

      - name: Verify License Report Location
        run: |
          find . -name "license-report.html"
          ls -l license-checker
          if [ ! -f license-checker/license-report.html ]; then
            echo "License report was not generated!"
            exit 1
          fi

      - name: Upload license report artifact
        uses: actions/upload-artifact@v4
        with:
          name: license-report
          path: license-checker/license-report.html
