name: Kotlin Dependency License Check

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  workflow_dispatch:

jobs:
  check-licenses:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Find the TOML file dynamically
      - name: Find libs.versions.toml file
        id: find_toml
        run: |
          TOML_FILE=$(find . -name "libs.versions.toml" | head -n 1)
          if [ -z "$TOML_FILE" ]; then
            echo "❌ No libs.versions.toml file found!"
            exit 1
          fi
          echo "✅ Found TOML file at: $TOML_FILE"
          echo "TOML_PATH=$TOML_FILE" >> "$GITHUB_ENV"

      # Step 3: Determine latest Go version
      - name: Determine latest Go version
        id: get_go_version
        run: |
          latest_go_version=$(curl -s https://go.dev/VERSION?m=text | sed 's/^go//' | head -n 1)
          echo "go-version=$latest_go_version" >> "$GITHUB_OUTPUT"

      # Step 4: Set up the Go environment
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ steps.get_go_version.outputs.go-version }}

      # Step 5: Create license checker directory and Go code
      - name: Create license checker and Go script
        run: |
          mkdir -p license-checker
          cd license-checker
          cat <<-'EOF' > license-checker.go
          package main

          import (
            "encoding/xml"
            "fmt"
            "io/ioutil"
            "net/http"
            "net/url"
            "os"
            "strings"

            "github.com/pelletier/go-toml"
          )

          type License struct {
            Name string `xml:"name"`
            URL  string `xml:"url"`
          }

          type MavenPOM struct {
            Licenses []License `xml:"licenses>license"`
          }

          func parseTOMLFile(filePath string) (map[string]string, error) {
            dependencies := make(map[string]string)
            tree, err := toml.LoadFile(filePath)
            if err != nil {
              return nil, fmt.Errorf("error loading TOML file: %v", err)
            }

            versions := tree.Get("versions").(*toml.Tree).ToMap()
            libraries := tree.Get("libraries").(*toml.Tree).ToMap()

            for _, value := range libraries {
              lib := value.(map[string]interface{})
              group := lib["group"].(string)
              name := lib["name"].(string)
              versionRef := lib["version.ref"].(string)
              version := versions[versionRef].(string)
              dependencies[fmt.Sprintf("%s:%s", group, name)] = version
            }

            return dependencies, nil
          }

          func fetchPOM(groupID, artifactID, version string) (*MavenPOM, error) {
            groupPath := strings.ReplaceAll(groupID, ".", "/")
            url := fmt.Sprintf("https://repo1.maven.org/maven2/%s/%s/%s/%s-%s.pom", groupPath, artifactID, version, artifactID, version)
            resp, err := http.Get(url)
            if err != nil || resp.StatusCode != 200 {
              return nil, fmt.Errorf("error fetching POM")
            }
            defer resp.Body.Close()
            data, err := ioutil.ReadAll(resp.Body)
            if err != nil {
              return nil, fmt.Errorf("error reading POM")
            }
            var pom MavenPOM
            err = xml.Unmarshal(data, &pom)
            return &pom, err
          }

          func generateHTMLReport(dependencies map[string]string) {
            html := `
              <!DOCTYPE html>
              <html>
              <head>
                <title>Kotlin Dependency License Report</title>
                <style>
                  table { border-collapse: collapse; width: 100%; }
                  th, td { border: 1px solid #ddd; padding: 8px; }
                  th { background-color: #f2f2f2; }
                </style>
              </head>
              <body>
                <h1>Kotlin Dependency License Report</h1>
                <table>
                  <tr><th>Dependency</th><th>Version</th><th>License</th><th>License URL</th><th>Search URL</th></tr>
            `
            for dep, version := range dependencies {
              parts := strings.Split(dep, ":")
              if len(parts) < 2 {
                searchURL := fmt.Sprintf("https://www.google.com/search?q=%s+%s+license", url.QueryEscape(dep), url.QueryEscape(version))
                html += fmt.Sprintf("<tr><td>%s</td><td>%s</td><td>%s</td><td>%s</td><td><a href='%s'>Search</a></td></tr>", dep, version, "Unknown", "Unknown", searchURL)
                continue
              }
              groupID, artifactID := parts[0], parts[1]
              pom, err := fetchPOM(groupID, artifactID, version)
              if err != nil || len(pom.Licenses) == 0 {
                searchURL := fmt.Sprintf("https://www.google.com/search?q=%s+%s+license", url.QueryEscape(dep), url.QueryEscape(version))
                html += fmt.Sprintf("<tr><td>%s</td><td>%s</td><td>%s</td><td>%s</td><td><a href='%s'>Search</a></td></tr>", dep, version, "Unknown", "Unknown", searchURL)
                continue
              }
              license := pom.Licenses[0]
              html += fmt.Sprintf("<tr><td>%s</td><td>%s</td><td>%s</td><td><a href='%s'>%s</a></td><td>-</td></tr>", dep, version, license.Name, license.URL, license.URL)
            }
            html += `
                </table>
              </body>
              </html>
            `
            os.MkdirAll("./license-checker", os.ModePerm)
            _ = ioutil.WriteFile("./license-checker/license-report.html", []byte(html), 0644)
          }

          func main() {
            tomlFile := os.Getenv("TOML_PATH")
            dependencies, err := parseTOMLFile(tomlFile)
            if err != nil {
              fmt.Println("Error parsing TOML file:", err)
              return
            }
            generateHTMLReport(dependencies)
            fmt.Println("License report successfully generated.")
          }
          EOF
          go mod init license-checker
          go get github.com/pelletier/go-toml
          go build -o license-checker-binary license-checker.go
          ./license-checker-binary

      - name: Upload license report
        uses: actions/upload-artifact@v4
        with:
          name: license-report
          path: ./license-checker/license-report.html
